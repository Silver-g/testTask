// Code generated by MockGen. DO NOT EDIT.
// Source: internal/post/interface_post.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	domain "testTask/internal/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockPostRepositoryInterface is a mock of PostRepositoryInterface interface.
type MockPostRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryInterfaceMockRecorder
}

// MockPostRepositoryInterfaceMockRecorder is the mock recorder for MockPostRepositoryInterface.
type MockPostRepositoryInterfaceMockRecorder struct {
	mock *MockPostRepositoryInterface
}

// NewMockPostRepositoryInterface creates a new mock instance.
func NewMockPostRepositoryInterface(ctrl *gomock.Controller) *MockPostRepositoryInterface {
	mock := &MockPostRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepositoryInterface) EXPECT() *MockPostRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockPostRepositoryInterface) CreateComment(userID int, postID, content string, parentID *int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", userID, postID, content, parentID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockPostRepositoryInterfaceMockRecorder) CreateComment(userID, postID, content, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockPostRepositoryInterface)(nil).CreateComment), userID, postID, content, parentID)
}

// CreatePost mocks base method.
func (m *MockPostRepositoryInterface) CreatePost(userID int, title, content string, commentsEnabled bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", userID, title, content, commentsEnabled)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostRepositoryInterfaceMockRecorder) CreatePost(userID, title, content, commentsEnabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostRepositoryInterface)(nil).CreatePost), userID, title, content, commentsEnabled)
}

// GetAllPosts mocks base method.
func (m *MockPostRepositoryInterface) GetAllPosts(limit, offset int) ([]domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts", limit, offset)
	ret0, _ := ret[0].([]domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockPostRepositoryInterfaceMockRecorder) GetAllPosts(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPostRepositoryInterface)(nil).GetAllPosts), limit, offset)
}

// GetCommentsEnabled mocks base method.
func (m *MockPostRepositoryInterface) GetCommentsEnabled(postID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsEnabled", postID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsEnabled indicates an expected call of GetCommentsEnabled.
func (mr *MockPostRepositoryInterfaceMockRecorder) GetCommentsEnabled(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsEnabled", reflect.TypeOf((*MockPostRepositoryInterface)(nil).GetCommentsEnabled), postID)
}
